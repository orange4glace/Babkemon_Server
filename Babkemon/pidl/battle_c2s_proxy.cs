




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace battle_c2s
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool SpawnEntity(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int entity_id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.SpawnEntity;
		__msg.Write(__msgid);
		mgg.babkemon.network.Marshaler.Write(__msg, entity_id);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_SpawnEntity, Common.SpawnEntity);
}

public bool SpawnEntity(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int entity_id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.SpawnEntity;
__msg.Write(__msgid);
mgg.babkemon.network.Marshaler.Write(__msg, entity_id);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_SpawnEntity, Common.SpawnEntity);
}
public bool SkillCommand(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int entity_id, mgg.babkemon.battle.SkillCommandPacket packet)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.SkillCommand;
		__msg.Write(__msgid);
		mgg.babkemon.network.Marshaler.Write(__msg, entity_id);
		mgg.babkemon.network.Marshaler.Write(__msg, packet);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_SkillCommand, Common.SkillCommand);
}

public bool SkillCommand(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int entity_id, mgg.babkemon.battle.SkillCommandPacket packet)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.SkillCommand;
__msg.Write(__msgid);
mgg.babkemon.network.Marshaler.Write(__msg, entity_id);
mgg.babkemon.network.Marshaler.Write(__msg, packet);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_SkillCommand, Common.SkillCommand);
}
public bool ItemCommand(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int entity_id, mgg.babkemon.battle.ItemCommandPacket packet)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ItemCommand;
		__msg.Write(__msgid);
		mgg.babkemon.network.Marshaler.Write(__msg, entity_id);
		mgg.babkemon.network.Marshaler.Write(__msg, packet);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ItemCommand, Common.ItemCommand);
}

public bool ItemCommand(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int entity_id, mgg.babkemon.battle.ItemCommandPacket packet)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ItemCommand;
__msg.Write(__msgid);
mgg.babkemon.network.Marshaler.Write(__msg, entity_id);
mgg.babkemon.network.Marshaler.Write(__msg, packet);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ItemCommand, Common.ItemCommand);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_SpawnEntity="SpawnEntity";
const string RmiName_SkillCommand="SkillCommand";
const string RmiName_ItemCommand="ItemCommand";
       
const string RmiName_First = RmiName_SpawnEntity;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_SpawnEntity="";
const string RmiName_SkillCommand="";
const string RmiName_ItemCommand="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

