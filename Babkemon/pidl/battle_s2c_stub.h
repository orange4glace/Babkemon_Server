  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "battle_s2c_common.h"

     
namespace battle_s2c {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool SetCooldown ( ::Proud::HostID, ::Proud::RmiContext& , const mgg::babkemon::battle::EntityID  & , const int  & )		{ 
			return false;
		} 

#define DECRMI_battle_s2c_SetCooldown bool SetCooldown ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::EntityID  & id, const int  & cooldown) PN_OVERRIDE

#define DEFRMI_battle_s2c_SetCooldown(DerivedClass) bool DerivedClass::SetCooldown ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::EntityID  & id, const int  & cooldown)
#define CALL_battle_s2c_SetCooldown SetCooldown ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::EntityID  & id, const int  & cooldown)
#define PARAM_battle_s2c_SetCooldown ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::EntityID  & id, const int  & cooldown)
               
		virtual bool BattleInfo ( ::Proud::HostID, ::Proud::RmiContext& , const mgg::babkemon::battle::BattleInfoPacket  & )		{ 
			return false;
		} 

#define DECRMI_battle_s2c_BattleInfo bool BattleInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::BattleInfoPacket  & battle_info) PN_OVERRIDE

#define DEFRMI_battle_s2c_BattleInfo(DerivedClass) bool DerivedClass::BattleInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::BattleInfoPacket  & battle_info)
#define CALL_battle_s2c_BattleInfo BattleInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::BattleInfoPacket  & battle_info)
#define PARAM_battle_s2c_BattleInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::BattleInfoPacket  & battle_info)
               
		virtual bool SpawnEntity ( ::Proud::HostID, ::Proud::RmiContext& , const int  & , const mgg::babkemon::battle::EntitySpawnPacket  & )		{ 
			return false;
		} 

#define DECRMI_battle_s2c_SpawnEntity bool SpawnEntity ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & battle_player_id, const mgg::babkemon::battle::EntitySpawnPacket  & packet) PN_OVERRIDE

#define DEFRMI_battle_s2c_SpawnEntity(DerivedClass) bool DerivedClass::SpawnEntity ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & battle_player_id, const mgg::babkemon::battle::EntitySpawnPacket  & packet)
#define CALL_battle_s2c_SpawnEntity SpawnEntity ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & battle_player_id, const mgg::babkemon::battle::EntitySpawnPacket  & packet)
#define PARAM_battle_s2c_SpawnEntity ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & battle_player_id, const mgg::babkemon::battle::EntitySpawnPacket  & packet)
               
		virtual bool CastSkill ( ::Proud::HostID, ::Proud::RmiContext& , const mgg::babkemon::battle::EntityID  & , const mgg::babkemon::packet::SkillBattleCastPacket  & )		{ 
			return false;
		} 

#define DECRMI_battle_s2c_CastSkill bool CastSkill ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::EntityID  & entity_id, const mgg::babkemon::packet::SkillBattleCastPacket  & packet) PN_OVERRIDE

#define DEFRMI_battle_s2c_CastSkill(DerivedClass) bool DerivedClass::CastSkill ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::EntityID  & entity_id, const mgg::babkemon::packet::SkillBattleCastPacket  & packet)
#define CALL_battle_s2c_CastSkill CastSkill ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::EntityID  & entity_id, const mgg::babkemon::packet::SkillBattleCastPacket  & packet)
#define PARAM_battle_s2c_CastSkill ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::EntityID  & entity_id, const mgg::babkemon::packet::SkillBattleCastPacket  & packet)
               
		virtual bool BattleEnd ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_battle_s2c_BattleEnd bool BattleEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_battle_s2c_BattleEnd(DerivedClass) bool DerivedClass::BattleEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_battle_s2c_BattleEnd BattleEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_battle_s2c_BattleEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool BattleWin ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_battle_s2c_BattleWin bool BattleWin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_battle_s2c_BattleWin(DerivedClass) bool DerivedClass::BattleWin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_battle_s2c_BattleWin BattleWin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_battle_s2c_BattleWin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool BattleLose ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_battle_s2c_BattleLose bool BattleLose ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_battle_s2c_BattleLose(DerivedClass) bool DerivedClass::BattleLose ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_battle_s2c_BattleLose BattleLose ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_battle_s2c_BattleLose ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
               
		virtual bool Turn ( ::Proud::HostID, ::Proud::RmiContext& )		{ 
			return false;
		} 

#define DECRMI_battle_s2c_Turn bool Turn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) PN_OVERRIDE

#define DEFRMI_battle_s2c_Turn(DerivedClass) bool DerivedClass::Turn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define CALL_battle_s2c_Turn Turn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
#define PARAM_battle_s2c_Turn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_SetCooldown;
		static const PNTCHAR* RmiName_BattleInfo;
		static const PNTCHAR* RmiName_SpawnEntity;
		static const PNTCHAR* RmiName_CastSkill;
		static const PNTCHAR* RmiName_BattleEnd;
		static const PNTCHAR* RmiName_BattleWin;
		static const PNTCHAR* RmiName_BattleLose;
		static const PNTCHAR* RmiName_Turn;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const mgg::babkemon::battle::EntityID  & , const int  & ) > SetCooldown_Function;
		virtual bool SetCooldown ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::EntityID  & id, const int  & cooldown) 
		{ 
			if (SetCooldown_Function==nullptr) 
				return true; 
			return SetCooldown_Function(remote,rmiContext, id, cooldown); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const mgg::babkemon::battle::BattleInfoPacket  & ) > BattleInfo_Function;
		virtual bool BattleInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::BattleInfoPacket  & battle_info) 
		{ 
			if (BattleInfo_Function==nullptr) 
				return true; 
			return BattleInfo_Function(remote,rmiContext, battle_info); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int  & , const mgg::babkemon::battle::EntitySpawnPacket  & ) > SpawnEntity_Function;
		virtual bool SpawnEntity ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & battle_player_id, const mgg::babkemon::battle::EntitySpawnPacket  & packet) 
		{ 
			if (SpawnEntity_Function==nullptr) 
				return true; 
			return SpawnEntity_Function(remote,rmiContext, battle_player_id, packet); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const mgg::babkemon::battle::EntityID  & , const mgg::babkemon::packet::SkillBattleCastPacket  & ) > CastSkill_Function;
		virtual bool CastSkill ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::EntityID  & entity_id, const mgg::babkemon::packet::SkillBattleCastPacket  & packet) 
		{ 
			if (CastSkill_Function==nullptr) 
				return true; 
			return CastSkill_Function(remote,rmiContext, entity_id, packet); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > BattleEnd_Function;
		virtual bool BattleEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (BattleEnd_Function==nullptr) 
				return true; 
			return BattleEnd_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > BattleWin_Function;
		virtual bool BattleWin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (BattleWin_Function==nullptr) 
				return true; 
			return BattleWin_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > BattleLose_Function;
		virtual bool BattleLose ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (BattleLose_Function==nullptr) 
				return true; 
			return BattleLose_Function(remote,rmiContext); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& ) > Turn_Function;
		virtual bool Turn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext ) 
		{ 
			if (Turn_Function==nullptr) 
				return true; 
			return Turn_Function(remote,rmiContext); 
		}

	};
#endif

}


