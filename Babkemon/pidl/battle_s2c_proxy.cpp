




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "battle_s2c_proxy.h"

namespace battle_s2c {


        
	bool Proxy::SetCooldown ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::EntityID & id, const int & cooldown)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SetCooldown;
__msg.Write(__msgid); 
	
__msg << id;
__msg << cooldown;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_SetCooldown, (::Proud::RmiID)Rmi_SetCooldown);
	}

	bool Proxy::SetCooldown ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const mgg::babkemon::battle::EntityID & id, const int & cooldown)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SetCooldown;
__msg.Write(__msgid); 
	
__msg << id;
__msg << cooldown;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_SetCooldown, (::Proud::RmiID)Rmi_SetCooldown);
	}
        
	bool Proxy::BattleInfo ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::BattleInfoPacket & battle_info)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_BattleInfo;
__msg.Write(__msgid); 
	
__msg << battle_info;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_BattleInfo, (::Proud::RmiID)Rmi_BattleInfo);
	}

	bool Proxy::BattleInfo ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const mgg::babkemon::battle::BattleInfoPacket & battle_info)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_BattleInfo;
__msg.Write(__msgid); 
	
__msg << battle_info;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_BattleInfo, (::Proud::RmiID)Rmi_BattleInfo);
	}
        
	bool Proxy::SpawnEntity ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & battle_player_id, const mgg::babkemon::battle::EntitySpawnPacket & packet)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SpawnEntity;
__msg.Write(__msgid); 
	
__msg << battle_player_id;
__msg << packet;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_SpawnEntity, (::Proud::RmiID)Rmi_SpawnEntity);
	}

	bool Proxy::SpawnEntity ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & battle_player_id, const mgg::babkemon::battle::EntitySpawnPacket & packet)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SpawnEntity;
__msg.Write(__msgid); 
	
__msg << battle_player_id;
__msg << packet;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_SpawnEntity, (::Proud::RmiID)Rmi_SpawnEntity);
	}
        
	bool Proxy::CastSkill ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const mgg::babkemon::battle::EntityID & entity_id, const mgg::babkemon::packet::SkillBattleCastPacket & packet)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_CastSkill;
__msg.Write(__msgid); 
	
__msg << entity_id;
__msg << packet;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_CastSkill, (::Proud::RmiID)Rmi_CastSkill);
	}

	bool Proxy::CastSkill ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const mgg::babkemon::battle::EntityID & entity_id, const mgg::babkemon::packet::SkillBattleCastPacket & packet)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_CastSkill;
__msg.Write(__msgid); 
	
__msg << entity_id;
__msg << packet;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_CastSkill, (::Proud::RmiID)Rmi_CastSkill);
	}
        
	bool Proxy::BattleEnd ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_BattleEnd;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_BattleEnd, (::Proud::RmiID)Rmi_BattleEnd);
	}

	bool Proxy::BattleEnd ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_BattleEnd;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_BattleEnd, (::Proud::RmiID)Rmi_BattleEnd);
	}
        
	bool Proxy::BattleWin ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_BattleWin;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_BattleWin, (::Proud::RmiID)Rmi_BattleWin);
	}

	bool Proxy::BattleWin ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_BattleWin;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_BattleWin, (::Proud::RmiID)Rmi_BattleWin);
	}
        
	bool Proxy::BattleLose ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_BattleLose;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_BattleLose, (::Proud::RmiID)Rmi_BattleLose);
	}

	bool Proxy::BattleLose ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_BattleLose;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_BattleLose, (::Proud::RmiID)Rmi_BattleLose);
	}
        
	bool Proxy::Turn ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext )	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Turn;
__msg.Write(__msgid); 
	
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_Turn, (::Proud::RmiID)Rmi_Turn);
	}

	bool Proxy::Turn ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_Turn;
__msg.Write(__msgid); 
	
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_Turn, (::Proud::RmiID)Rmi_Turn);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_SetCooldown =_PNT("SetCooldown");
#else
const PNTCHAR* Proxy::RmiName_SetCooldown =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_BattleInfo =_PNT("BattleInfo");
#else
const PNTCHAR* Proxy::RmiName_BattleInfo =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_SpawnEntity =_PNT("SpawnEntity");
#else
const PNTCHAR* Proxy::RmiName_SpawnEntity =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_CastSkill =_PNT("CastSkill");
#else
const PNTCHAR* Proxy::RmiName_CastSkill =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_BattleEnd =_PNT("BattleEnd");
#else
const PNTCHAR* Proxy::RmiName_BattleEnd =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_BattleWin =_PNT("BattleWin");
#else
const PNTCHAR* Proxy::RmiName_BattleWin =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_BattleLose =_PNT("BattleLose");
#else
const PNTCHAR* Proxy::RmiName_BattleLose =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_Turn =_PNT("Turn");
#else
const PNTCHAR* Proxy::RmiName_Turn =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_SetCooldown;

}



