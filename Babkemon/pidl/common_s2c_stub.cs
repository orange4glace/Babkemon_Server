




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace common_s2c
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool WelcomeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int player_id);  
		public WelcomeDelegate Welcome = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int player_id)
		{ 
			return false;
		};
		public delegate bool EnterBattleDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int battle_id);  
		public EnterBattleDelegate EnterBattle = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int battle_id)
		{ 
			return false;
		};
		public delegate bool EnterFieldDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int field_id);  
		public EnterFieldDelegate EnterField = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int field_id)
		{ 
			return false;
		};
		public delegate bool AddItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, mgg.babkemon.item.ItemPacket packet);  
		public AddItemDelegate AddItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, mgg.babkemon.item.ItemPacket packet)
		{ 
			return false;
		};
		public delegate bool RemoveItemDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int item_id);  
		public RemoveItemDelegate RemoveItem = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int item_id)
		{ 
			return false;
		};
		public delegate bool SetItemAmountDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int item_id, int amount);  
		public SetItemAmountDelegate SetItemAmount = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int item_id, int amount)
		{ 
			return false;
		};
		public delegate bool AddBabkemonDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, mgg.babkemon.packet.BabkemonPacket packet);  
		public AddBabkemonDelegate AddBabkemon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, mgg.babkemon.packet.BabkemonPacket packet)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
case Common.Welcome:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int player_id; mgg.babkemon.network.Marshaler.Read(__msg,out player_id);	
core.PostCheckReadMessage(__msg, RmiName_Welcome);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=player_id.ToString()+",";
			NotifyCallFromStub(Common.Welcome, RmiName_Welcome,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.Welcome;
			summary.rmiName = RmiName_Welcome;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=Welcome (remote,ctx , player_id );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_Welcome);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.Welcome;
			summary.rmiName = RmiName_Welcome;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.EnterBattle:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int battle_id; mgg.babkemon.network.Marshaler.Read(__msg,out battle_id);	
core.PostCheckReadMessage(__msg, RmiName_EnterBattle);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=battle_id.ToString()+",";
			NotifyCallFromStub(Common.EnterBattle, RmiName_EnterBattle,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.EnterBattle;
			summary.rmiName = RmiName_EnterBattle;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=EnterBattle (remote,ctx , battle_id );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_EnterBattle);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.EnterBattle;
			summary.rmiName = RmiName_EnterBattle;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.EnterField:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int field_id; mgg.babkemon.network.Marshaler.Read(__msg,out field_id);	
core.PostCheckReadMessage(__msg, RmiName_EnterField);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=field_id.ToString()+",";
			NotifyCallFromStub(Common.EnterField, RmiName_EnterField,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.EnterField;
			summary.rmiName = RmiName_EnterField;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=EnterField (remote,ctx , field_id );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_EnterField);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.EnterField;
			summary.rmiName = RmiName_EnterField;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.AddItem:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		mgg.babkemon.item.ItemPacket packet; mgg.babkemon.network.Marshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AddItem);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=packet.ToString()+",";
			NotifyCallFromStub(Common.AddItem, RmiName_AddItem,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.AddItem;
			summary.rmiName = RmiName_AddItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=AddItem (remote,ctx , packet );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_AddItem);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.AddItem;
			summary.rmiName = RmiName_AddItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.RemoveItem:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int item_id; mgg.babkemon.network.Marshaler.Read(__msg,out item_id);	
core.PostCheckReadMessage(__msg, RmiName_RemoveItem);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=item_id.ToString()+",";
			NotifyCallFromStub(Common.RemoveItem, RmiName_RemoveItem,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.RemoveItem;
			summary.rmiName = RmiName_RemoveItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=RemoveItem (remote,ctx , item_id );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_RemoveItem);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.RemoveItem;
			summary.rmiName = RmiName_RemoveItem;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.SetItemAmount:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int item_id; mgg.babkemon.network.Marshaler.Read(__msg,out item_id);	
int amount; mgg.babkemon.network.Marshaler.Read(__msg,out amount);	
core.PostCheckReadMessage(__msg, RmiName_SetItemAmount);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=item_id.ToString()+",";
parameterString+=amount.ToString()+",";
			NotifyCallFromStub(Common.SetItemAmount, RmiName_SetItemAmount,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.SetItemAmount;
			summary.rmiName = RmiName_SetItemAmount;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=SetItemAmount (remote,ctx , item_id, amount );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_SetItemAmount);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.SetItemAmount;
			summary.rmiName = RmiName_SetItemAmount;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.AddBabkemon:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		mgg.babkemon.packet.BabkemonPacket packet; mgg.babkemon.network.Marshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AddBabkemon);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=packet.ToString()+",";
			NotifyCallFromStub(Common.AddBabkemon, RmiName_AddBabkemon,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.AddBabkemon;
			summary.rmiName = RmiName_AddBabkemon;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=AddBabkemon (remote,ctx , packet );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_AddBabkemon);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.AddBabkemon;
			summary.rmiName = RmiName_AddBabkemon;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_Welcome="Welcome";
const string RmiName_EnterBattle="EnterBattle";
const string RmiName_EnterField="EnterField";
const string RmiName_AddItem="AddItem";
const string RmiName_RemoveItem="RemoveItem";
const string RmiName_SetItemAmount="SetItemAmount";
const string RmiName_AddBabkemon="AddBabkemon";
       
const string RmiName_First = RmiName_Welcome;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_Welcome="";
const string RmiName_EnterBattle="";
const string RmiName_EnterField="";
const string RmiName_AddItem="";
const string RmiName_RemoveItem="";
const string RmiName_SetItemAmount="";
const string RmiName_AddBabkemon="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

