




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace field_s2c
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool Snapshot(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, mgg.babkemon.field.FieldSnapshotPacket snapshot)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.Snapshot;
		__msg.Write(__msgid);
		mgg.babkemon.network.Marshaler.Write(__msg, snapshot);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_Snapshot, Common.Snapshot);
}

public bool Snapshot(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, mgg.babkemon.field.FieldSnapshotPacket snapshot)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.Snapshot;
__msg.Write(__msgid);
mgg.babkemon.network.Marshaler.Write(__msg, snapshot);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_Snapshot, Common.Snapshot);
}
public bool SpawnEntity(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, mgg.babkemon.field.EntitySpawnPacket packet)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.SpawnEntity;
		__msg.Write(__msgid);
		mgg.babkemon.network.Marshaler.Write(__msg, packet);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_SpawnEntity, Common.SpawnEntity);
}

public bool SpawnEntity(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, mgg.babkemon.field.EntitySpawnPacket packet)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.SpawnEntity;
__msg.Write(__msgid);
mgg.babkemon.network.Marshaler.Write(__msg, packet);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_SpawnEntity, Common.SpawnEntity);
}
public bool DespawnEntity(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int entity_id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.DespawnEntity;
		__msg.Write(__msgid);
		mgg.babkemon.network.Marshaler.Write(__msg, entity_id);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_DespawnEntity, Common.DespawnEntity);
}

public bool DespawnEntity(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int entity_id)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.DespawnEntity;
__msg.Write(__msgid);
mgg.babkemon.network.Marshaler.Write(__msg, entity_id);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_DespawnEntity, Common.DespawnEntity);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_Snapshot="Snapshot";
const string RmiName_SpawnEntity="SpawnEntity";
const string RmiName_DespawnEntity="DespawnEntity";
       
const string RmiName_First = RmiName_Snapshot;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_Snapshot="";
const string RmiName_SpawnEntity="";
const string RmiName_DespawnEntity="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

