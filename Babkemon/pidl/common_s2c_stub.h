  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "common_s2c_common.h"

     
namespace common_s2c {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool EnterBattle ( ::Proud::HostID, ::Proud::RmiContext& , const int  & )		{ 
			return false;
		} 

#define DECRMI_common_s2c_EnterBattle bool EnterBattle ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & battle_id) PN_OVERRIDE

#define DEFRMI_common_s2c_EnterBattle(DerivedClass) bool DerivedClass::EnterBattle ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & battle_id)
#define CALL_common_s2c_EnterBattle EnterBattle ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & battle_id)
#define PARAM_common_s2c_EnterBattle ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & battle_id)
               
		virtual bool EnterField ( ::Proud::HostID, ::Proud::RmiContext& , const int  & )		{ 
			return false;
		} 

#define DECRMI_common_s2c_EnterField bool EnterField ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & field_id) PN_OVERRIDE

#define DEFRMI_common_s2c_EnterField(DerivedClass) bool DerivedClass::EnterField ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & field_id)
#define CALL_common_s2c_EnterField EnterField ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & field_id)
#define PARAM_common_s2c_EnterField ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & field_id)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_EnterBattle;
		static const PNTCHAR* RmiName_EnterField;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int  & ) > EnterBattle_Function;
		virtual bool EnterBattle ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & battle_id) 
		{ 
			if (EnterBattle_Function==nullptr) 
				return true; 
			return EnterBattle_Function(remote,rmiContext, battle_id); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int  & ) > EnterField_Function;
		virtual bool EnterField ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int  & field_id) 
		{ 
			if (EnterField_Function==nullptr) 
				return true; 
			return EnterField_Function(remote,rmiContext, field_id); 
		}

	};
#endif

}


