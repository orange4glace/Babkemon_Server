




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace battle_c2s
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool SpawnEntityDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int entity_id);  
		public SpawnEntityDelegate SpawnEntity = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int entity_id)
		{ 
			return false;
		};
		public delegate bool SkillCommandDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int entity_id, mgg.babkemon.battle.SkillCommandPacket packet);  
		public SkillCommandDelegate SkillCommand = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int entity_id, mgg.babkemon.battle.SkillCommandPacket packet)
		{ 
			return false;
		};
		public delegate bool ItemCommandDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int entity_id, mgg.babkemon.battle.ItemCommandPacket packet);  
		public ItemCommandDelegate ItemCommand = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int entity_id, mgg.babkemon.battle.ItemCommandPacket packet)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
case Common.SpawnEntity:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int entity_id; mgg.babkemon.network.Marshaler.Read(__msg,out entity_id);	
core.PostCheckReadMessage(__msg, RmiName_SpawnEntity);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=entity_id.ToString()+",";
			NotifyCallFromStub(Common.SpawnEntity, RmiName_SpawnEntity,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.SpawnEntity;
			summary.rmiName = RmiName_SpawnEntity;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=SpawnEntity (remote,ctx , entity_id );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_SpawnEntity);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.SpawnEntity;
			summary.rmiName = RmiName_SpawnEntity;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.SkillCommand:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int entity_id; mgg.babkemon.network.Marshaler.Read(__msg,out entity_id);	
mgg.babkemon.battle.SkillCommandPacket packet; mgg.babkemon.network.Marshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillCommand);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=entity_id.ToString()+",";
parameterString+=packet.ToString()+",";
			NotifyCallFromStub(Common.SkillCommand, RmiName_SkillCommand,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.SkillCommand;
			summary.rmiName = RmiName_SkillCommand;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=SkillCommand (remote,ctx , entity_id, packet );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_SkillCommand);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.SkillCommand;
			summary.rmiName = RmiName_SkillCommand;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
case Common.ItemCommand:
	{
		Nettention.Proud.RmiContext ctx=new Nettention.Proud.RmiContext();
		ctx.sentFrom=pa.RemoteHostID;
		ctx.relayed=pa.IsRelayed;
		ctx.hostTag=hostTag;
		ctx.encryptMode = pa.EncryptMode;
		ctx.compressMode = pa.CompressMode;
			
		int entity_id; mgg.babkemon.network.Marshaler.Read(__msg,out entity_id);	
mgg.babkemon.battle.ItemCommandPacket packet; mgg.babkemon.network.Marshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemCommand);
		if(enableNotifyCallFromStub==true)
		{
			string parameterString="";
			parameterString+=entity_id.ToString()+",";
parameterString+=packet.ToString()+",";
			NotifyCallFromStub(Common.ItemCommand, RmiName_ItemCommand,parameterString);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
			summary.rmiID = Common.ItemCommand;
			summary.rmiName = RmiName_ItemCommand;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			BeforeRmiInvocation(summary);
		}
			
		long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();
			
		// Call this method.
		bool __ret=ItemCommand (remote,ctx , entity_id, packet );
			
		if(__ret==false)
		{
			// Error: RMI function that a user did not create has been called. 
			core.ShowNotImplementedRmiWarning(RmiName_ItemCommand);
		}
			
		if(enableStubProfiling)
		{
			Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
			summary.rmiID = Common.ItemCommand;
			summary.rmiName = RmiName_ItemCommand;
			summary.hostID = remote;
			summary.hostTag = hostTag;
			summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
			AfterRmiInvocation(summary);
		}
	}
	break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_SpawnEntity="SpawnEntity";
const string RmiName_SkillCommand="SkillCommand";
const string RmiName_ItemCommand="ItemCommand";
       
const string RmiName_First = RmiName_SpawnEntity;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
const string RmiName_SpawnEntity="";
const string RmiName_SkillCommand="";
const string RmiName_ItemCommand="";
       
const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

